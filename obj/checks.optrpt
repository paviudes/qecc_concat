Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -fPIC -Wall -Wextra -std=c11 -O3 -xavx -qopt-report-phase=vec -qopt-report=5 -c -o obj/checks.o

Begin optimization report for: IsDiagonal(double **, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/checks.c(22,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/checks.c(26,13) ]

   LOOP BEGIN at src/checks.c(23,3)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/checks.c(26,13) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: IsPositive(double __complex__ **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/checks.c(38,2)
   remark #15389: vectorization support: reference eigvals[i] has unaligned access   [ src/checks.c(41,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 47 
   remark #15477: vector cost: 12.000 
   remark #15478: estimated potential speedup: 3.290 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: IsHermitian(double __complex__ **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/checks.c(54,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/checks.c(57,12) ]

   LOOP BEGIN at src/checks.c(55,3)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/checks.c(57,12) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: IsState(double __complex__ **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/checks.c(38,2) inlined into src/checks.c(86,15)
   remark #15389: vectorization support: reference eigvals[i] has unaligned access   [ src/checks.c(41,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.188
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 47 
   remark #15477: vector cost: 12.000 
   remark #15478: estimated potential speedup: 3.290 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/checks.c(69,2) inlined into src/checks.c(89,13)
   remark #15389: vectorization support: reference choi[i] has unaligned access   [ src/checks.c(70,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(choi+i*8))[i]>, 64-bit indexed, part of address is read from memory   [ src/checks.c(70,19) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.647
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 8.500 
   remark #15478: estimated potential speedup: 0.710 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at src/checks.c(54,2) inlined into src/checks.c(83,16)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at src/checks.c(55,3) inlined into src/checks.c(83,16)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: IsPDF(double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/checks.c(101,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/checks.c(104,11) ]
LOOP END
===========================================================================

Begin optimization report for: IsTraceOne(double __complex__ **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/checks.c(69,2)
   remark #15389: vectorization support: reference choi[i] has unaligned access   [ src/checks.c(70,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(choi+i*8))[i]>, 64-bit indexed, part of address is read from memory   [ src/checks.c(70,19) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.647
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 8.500 
   remark #15478: estimated potential speedup: 0.710 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================
