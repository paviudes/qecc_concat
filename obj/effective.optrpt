Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -fPIC -Wall -Wextra -std=c11 -O3 -xavx -qopt-report-phase=vec -qopt-report=5 -c -o obj/effective.o

Begin optimization report for: IsElement(long *, int, long)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(22,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/effective.c(24,11) ]
LOOP END
===========================================================================

Begin optimization report for: PickFromInterval(int, int, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(49,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: ProcessToChoi(double **, int, double __complex__ **, double __complex__ ***)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(143,2)
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <choi[v/nlogs]>, part of index is nonlinearly computed   [ src/effective.c(144,3) ]
   remark #15329: vectorization support: indirect store was emulated for the variable <(*(choi+(v/nlogs)*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/effective.c(144,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 97 
   remark #15477: vector cost: 52.750 
   remark #15478: estimated potential speedup: 1.830 
   remark #15482: vectorized math library calls: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(143,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(145,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (*(choi+i*8))[j] (150:3) and (*(choi+i*8))[j] (150:3)
   remark #15346: vector dependence: assumed ANTI dependence between (*(choi+i*8))[j] (150:3) and (*(choi+i*8))[j] (150:3)
LOOP END
===========================================================================

Begin optimization report for: ComputeLevelZeroMetrics(struct simul_t *, int, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(161,2)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ src/effective.c(162,13) ]
LOOP END

LOOP BEGIN at src/effective.c(143,2) inlined into src/effective.c(199,3)
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <choi[v/nlogs]>, part of index is nonlinearly computed   [ src/effective.c(144,3) ]
   remark #15329: vectorization support: indirect store was emulated for the variable <(*(choi+(v/nlogs)*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/effective.c(144,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 97 
   remark #15477: vector cost: 52.750 
   remark #15478: estimated potential speedup: 1.830 
   remark #15482: vectorized math library calls: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(143,2) inlined into src/effective.c(199,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(145,2) inlined into src/effective.c(199,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (*(choi+i*8))[j] (150:3) and (*(choi+i*8))[j] (150:3)
   remark #15346: vector dependence: assumed ANTI dependence between (*(choi+i*8))[j] (150:3) and (*(choi+i*8))[j] (150:3)
LOOP END

LOOP BEGIN at src/effective.c(207,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/effective.c(208,3) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeLevelOneChannels(struct simul_t *, struct qecc_t *, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(223,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(224,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(225,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(225,5)
         remark #15388: vectorization support: reference sim->virtchan[q][i][j] has aligned access   [ src/effective.c(227,8) ]
         remark #15389: vectorization support: reference sim->physical[i*qcode->nlogs+j] has unaligned access   [ src/effective.c(227,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.444
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 2.140 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(225,5)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(225,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(225,5)
         remark #15388: vectorization support: reference sim->virtchan[q][i][j] has aligned access   [ src/effective.c(229,8) ]
         remark #15389: vectorization support: reference sim->physical[qcode->nlogs*(q*qcode->nlogs+i)+j] has unaligned access   [ src/effective.c(229,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.444
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 2.140 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(225,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(249,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(249,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(249,2)
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(69,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.490 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(249,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(73,3) inlined into src/effective.c(249,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(249,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(249,2)
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.308
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 3.250 
      remark #15478: estimated potential speedup: 3.040 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(249,2)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.231
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 3.250 
      remark #15478: estimated potential speedup: 2.790 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(249,2)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(80,5) inlined into src/effective.c(249,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(249,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(249,2)
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.308
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 3.250 
         remark #15478: estimated potential speedup: 2.790 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(249,2)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.231
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 3.250 
         remark #15478: estimated potential speedup: 2.790 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(249,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(249,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(249,2)
   remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
   remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 2.250 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(249,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
   remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.585
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 2.250 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(249,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(94,3) inlined into src/effective.c(249,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Peeled loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Distributed chunk1>
      remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
      remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.295
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Remainder loop for vectorization, Distributed chunk1>
      remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
      remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.182
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 2.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Peeled loop for vectorization, Distributed chunk2>
   LOOP END

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Distributed chunk2>
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
      remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.234
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 2.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Remainder loop for vectorization, Distributed chunk2>
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
      remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.938
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 2.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(249,2)
   <Remainder loop for vectorization, Distributed chunk2>
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(108,5) inlined into src/effective.c(249,2)
   remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/effective.c(251,2)
<Distributed chunk1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(251,2)
   <Peeled loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at src/effective.c(251,2)
   <Distributed chunk1>
      remark #15388: vectorization support: reference sim->levelOneSynds[s] has aligned access   [ src/effective.c(252,4) ]
      remark #15389: vectorization support: reference sim->syndprobs[s] has unaligned access   [ src/effective.c(252,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.600
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.250 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(251,2)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(251,2)
<Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(253,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(254,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/effective.c(254,4)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(254,4)
            remark #15388: vectorization support: reference sim->levelOneChannels[s][i][j] has aligned access   [ src/effective.c(255,6) ]
            remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(255,41) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 2.600
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.250 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(254,4)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Performance(struct qecc_t **, struct simul_t **, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(436,2)
   remark #15523: loop was not vectorized: loop control variable l was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/effective.c(161,2) inlined into src/effective.c(445,3)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ src/effective.c(162,13) ]
LOOP END

LOOP BEGIN at src/effective.c(143,2) inlined into src/effective.c(445,3)
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <choi[v/nlogs]>, part of index is nonlinearly computed   [ src/effective.c(144,3) ]
   remark #15329: vectorization support: indirect store was emulated for the variable <(*(choi+(v/nlogs)*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/effective.c(144,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 97 
   remark #15477: vector cost: 52.750 
   remark #15478: estimated potential speedup: 1.830 
   remark #15482: vectorized math library calls: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(143,2) inlined into src/effective.c(445,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(145,2) inlined into src/effective.c(445,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (*(choi+i*8))[j] (150:3) and (*(choi+i*8))[j] (150:3)
   remark #15346: vector dependence: assumed ANTI dependence between (*(choi+i*8))[j] (150:3) and (*(choi+i*8))[j] (150:3)
LOOP END

LOOP BEGIN at src/effective.c(207,2) inlined into src/effective.c(445,3)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/effective.c(208,3) ]
LOOP END

LOOP BEGIN at src/effective.c(449,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(223,3) inlined into src/effective.c(450,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(224,4) inlined into src/effective.c(450,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/effective.c(225,5) inlined into src/effective.c(450,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(225,5) inlined into src/effective.c(450,3)
            remark #15388: vectorization support: reference sim->virtchan[q][i][j] has aligned access   [ src/effective.c(227,8) ]
            remark #15389: vectorization support: reference sim->physical[i*qcode->nlogs+j] has unaligned access   [ src/effective.c(227,35) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 1.444
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 2.250 
            remark #15478: estimated potential speedup: 2.140 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(225,5) inlined into src/effective.c(450,3)
         <Remainder loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(225,5) inlined into src/effective.c(450,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(225,5) inlined into src/effective.c(450,3)
            remark #15388: vectorization support: reference sim->virtchan[q][i][j] has aligned access   [ src/effective.c(229,8) ]
            remark #15389: vectorization support: reference sim->physical[qcode->nlogs*(q*qcode->nlogs+i)+j] has unaligned access   [ src/effective.c(229,35) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 1.444
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 2.250 
            remark #15478: estimated potential speedup: 2.140 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(225,5) inlined into src/effective.c(450,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(450,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(450,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(450,3)
         remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(69,3) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 1.490 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(450,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at src/effective.c(73,3) inlined into src/effective.c(450,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(450,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(450,3)
         remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
         remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
         remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.308
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 3.250 
         remark #15478: estimated potential speedup: 3.040 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(450,3)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
         remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
         remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.231
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 2.140 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(450,3)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(80,5) inlined into src/effective.c(450,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(450,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(450,3)
            remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
            remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
            remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.308
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 10 
            remark #15477: vector cost: 3.250 
            remark #15478: estimated potential speedup: 2.790 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(450,3)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
            remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
            remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 1.231
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 2.250 
            remark #15478: estimated potential speedup: 2.140 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(450,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(450,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(450,3)
      remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
      remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
      remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
      remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
      remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
      remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.150
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 2.250 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(450,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
      remark #15389: vectorization support: reference sim->metricValues[1][m] has unaligned access   [ src/effective.c(90,5) ]
      remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
      remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
      remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
      remark #15388: vectorization support: reference sim->sumsq[1][m] has aligned access   [ src/effective.c(91,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.585
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 2.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(450,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(94,3) inlined into src/effective.c(450,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Peeled loop for vectorization, Distributed chunk1>
      LOOP END

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Distributed chunk1>
         remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
         remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
         remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.295
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.750 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Remainder loop for vectorization, Distributed chunk1>
         remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
         remark #15388: vectorization support: reference sim->logical[1][i][j] has aligned access   [ src/effective.c(96,6) ]
         remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.182
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 2.140 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Remainder loop for vectorization, Distributed chunk1>
      LOOP END

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Peeled loop for vectorization, Distributed chunk2>
      LOOP END

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Distributed chunk2>
         remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
         remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
         remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.234
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 2.940 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Remainder loop for vectorization, Distributed chunk2>
         remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
         remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
         remark #15388: vectorization support: reference sim->sumsq[1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.938
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 2.140 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(450,3)
      <Remainder loop for vectorization, Distributed chunk2>
      LOOP END
   LOOP END

   LOOP BEGIN at src/effective.c(108,5) inlined into src/effective.c(450,3)
      remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at src/effective.c(251,2) inlined into src/effective.c(450,3)
   <Distributed chunk1>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(253,3) inlined into src/effective.c(450,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/effective.c(254,4) inlined into src/effective.c(450,3)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/effective.c(254,4) inlined into src/effective.c(450,3)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/effective.c(254,4) inlined into src/effective.c(450,3)
               remark #15388: vectorization support: reference sim->levelOneChannels[s][i][j] has aligned access   [ src/effective.c(255,6) ]
               remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(255,41) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 2.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 5 
               remark #15477: vector cost: 2.500 
               remark #15478: estimated potential speedup: 1.250 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/effective.c(254,4) inlined into src/effective.c(450,3)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/effective.c(251,2) inlined into src/effective.c(450,3)
   <Peeled loop for vectorization, Distributed chunk2>
   LOOP END

   LOOP BEGIN at src/effective.c(251,2) inlined into src/effective.c(450,3)
   <Distributed chunk2>
      remark #15388: vectorization support: reference sim->levelOneSynds[s] has aligned access   [ src/effective.c(252,4) ]
      remark #15389: vectorization support: reference sim->syndprobs[s] has unaligned access   [ src/effective.c(252,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.444
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 2.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(251,2) inlined into src/effective.c(450,3)
   <Remainder loop for vectorization, Distributed chunk2>
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(457,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/effective.c(460,4)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/effective.c(466,6)
         remark #15382: vectorization support: call to function _?1memcpy cannot be vectorized   [ src/effective.c(467,7) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between *sims->levelOneChannels[randsynd][i][j] (467:7) and *channels[c][0][i][j] (468:8)
         remark #15346: vector dependence: assumed FLOW dependence between *channels[c][0][i][j] (468:8) and *sims->levelOneChannels[randsynd][i][j] (467:7)

         LOOP BEGIN at src/effective.c(467,7)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at src/effective.c(467,7)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at src/effective.c(467,7)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(477,6)
         remark #15382: vectorization support: call to function _?1memcpy cannot be vectorized   [ src/effective.c(478,7) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between *sims->levelOneChannels[randsynd][i][j] (478:7) and *channels[c][0][i][j] (479:8)
         remark #15346: vector dependence: assumed FLOW dependence between *channels[c][0][i][j] (479:8) and *sims->levelOneChannels[randsynd][i][j] (478:7)

         LOOP BEGIN at src/effective.c(478,7)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at src/effective.c(478,7)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at src/effective.c(478,7)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(487,6)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between *channels[c][s][i][j] (490:9) and *channels[c][s][i][j] (490:9)
         remark #15346: vector dependence: assumed OUTPUT dependence between *channels[c][s][i][j] (490:9) and *channels[c][s][i][j] (490:9)

         LOOP BEGIN at src/effective.c(488,7)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between *channels[c][s][i][j] (490:9) and *channels[c][s][i][j] (490:9)
            remark #15346: vector dependence: assumed OUTPUT dependence between *channels[c][s][i][j] (490:9) and *channels[c][s][i][j] (490:9)

            LOOP BEGIN at src/effective.c(489,8)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between *channels[c][s][i][j] (490:9) and (*(*((*(sims+s*8))->levelOneChannels+randsynd*8)+i*8))[j] (490:9)
               remark #15346: vector dependence: assumed ANTI dependence between (*(*((*(sims+s*8))->levelOneChannels+randsynd*8)+i*8))[j] (490:9) and *channels[c][s][i][j] (490:9)
            LOOP END

            LOOP BEGIN at src/effective.c(489,8)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/effective.c(505,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between *(*((*(sims+s*8))->runavg+m*8)) (508:8) and *(*((*(sims+s*8))->runavg+m*8)) (509:8)
      remark #15346: vector dependence: assumed ANTI dependence between *(*((*(sims+s*8))->runavg+m*8)) (509:8) and *(*((*(sims+s*8))->runavg+m*8)) (508:8)

      LOOP BEGIN at src/effective.c(22,2) inlined into src/effective.c(506,9)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ src/effective.c(23,3) ]
      LOOP END

      LOOP BEGIN at src/effective.c(507,6)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between *(*((*(sims+s*8))->runavg+m*8)) (508:8) and *(*((*(sims+s*8))->runavg+m*8)) (509:8)
         remark #15346: vector dependence: assumed ANTI dependence between *(*((*(sims+s*8))->runavg+m*8)) (509:8) and *(*((*(sims+s*8))->runavg+m*8)) (508:8)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(517,2)
   remark #15523: loop was not vectorized: loop control variable l was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: ComputeLogicalChannels(struct simul_t **, struct qecc_t **, struct constants_t *, double *****)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(289,2)
   remark #15523: loop was not vectorized: loop control variable l was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/effective.c(310,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(312,3)
      remark #15523: loop was not vectorized: loop control variable s was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at src/effective.c(322,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(325,3)
         remark #15523: loop was not vectorized: loop control variable s was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at src/effective.c(329,4)
            remark #15523: loop was not vectorized: loop control variable q was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at src/effective.c(330,5)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed OUTPUT dependence between (*(*((*(sims+s*8))->virtchan+q*8)+i*8))[j] (332:8) and (*(*((*(sims+s*8))->virtchan+q*8)+i*8))[j] (332:8)
               remark #15346: vector dependence: assumed OUTPUT dependence between (*(*((*(sims+s*8))->virtchan+q*8)+i*8))[j] (332:8) and (*(*((*(sims+s*8))->virtchan+q*8)+i*8))[j] (332:8)

               LOOP BEGIN at src/effective.c(331,6)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between (*(*((*(sims+s*8))->virtchan+q*8)+i*8))[j] (332:8) and channels[l-1][((*(qcode+l*8))->N)*b+q][s][i][j] (332:8)
                  remark #15346: vector dependence: assumed ANTI dependence between channels[l-1][((*(qcode+l*8))->N)*b+q][s][i][j] (332:8) and (*(*((*(sims+s*8))->virtchan+q*8)+i*8))[j] (332:8)
               LOOP END
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(346,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(346,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(346,3)
            remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(69,3) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 1.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 1.490 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(68,2) inlined into src/effective.c(346,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(73,3) inlined into src/effective.c(346,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(346,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(346,3)
            remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
            remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
            remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.308
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 11 
            remark #15477: vector cost: 3.250 
            remark #15478: estimated potential speedup: 3.040 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(346,3)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
            remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
            remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 1.231
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
         LOOP END

         LOOP BEGIN at src/effective.c(77,5) inlined into src/effective.c(346,3)
         <Remainder loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(80,5) inlined into src/effective.c(346,3)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(346,3)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(346,3)
               remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
               remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
               remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 4
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.308
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 11 
               remark #15477: vector cost: 3.250 
               remark #15478: estimated potential speedup: 3.040 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(346,3)
            <Remainder loop for vectorization>
               remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
               remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
               remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 4
               remark #15309: vectorization support: normalized vectorization overhead 1.231
               remark #15301: REMAINDER LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
            LOOP END

            LOOP BEGIN at src/effective.c(81,6) inlined into src/effective.c(346,3)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(346,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(346,3)
         remark #15389: vectorization support: reference sim->metricValues[l+1][m] has unaligned access   [ src/effective.c(90,5) ]
         remark #15389: vectorization support: reference sim->metricValues[l+1][m] has unaligned access   [ src/effective.c(90,5) ]
         remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
         remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
         remark #15388: vectorization support: reference sim->sumsq[l+1][m] has aligned access   [ src/effective.c(91,5) ]
         remark #15388: vectorization support: reference sim->sumsq[l+1][m] has aligned access   [ src/effective.c(91,5) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.179
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 26 
         remark #15477: vector cost: 9.750 
         remark #15478: estimated potential speedup: 2.470 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(346,3)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference sim->metricValues[l+1][m] has unaligned access   [ src/effective.c(90,5) ]
         remark #15389: vectorization support: reference sim->metricValues[l+1][m] has unaligned access   [ src/effective.c(90,5) ]
         remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
         remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
         remark #15388: vectorization support: reference sim->sumsq[l+1][m] has aligned access   [ src/effective.c(91,5) ]
         remark #15388: vectorization support: reference sim->sumsq[l+1][m] has aligned access   [ src/effective.c(91,5) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.667
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
      LOOP END

      LOOP BEGIN at src/effective.c(89,3) inlined into src/effective.c(346,3)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(94,3) inlined into src/effective.c(346,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(346,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(346,3)
            remark #15389: vectorization support: reference sim->logical[l+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
            remark #15389: vectorization support: reference sim->logical[l+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
            remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
            remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
            remark #15388: vectorization support: reference sim->sumsq[l+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
            remark #15388: vectorization support: reference sim->sumsq[l+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.179
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 26 
            remark #15477: vector cost: 9.750 
            remark #15478: estimated potential speedup: 2.470 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(346,3)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference sim->logical[l+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
            remark #15389: vectorization support: reference sim->logical[l+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
            remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
            remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
            remark #15388: vectorization support: reference sim->sumsq[l+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
            remark #15388: vectorization support: reference sim->sumsq[l+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 0.667
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
         LOOP END

         LOOP BEGIN at src/effective.c(95,4) inlined into src/effective.c(346,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(108,5) inlined into src/effective.c(346,3)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at src/effective.c(352,5)
         remark #15382: vectorization support: call to function _?1memcpy cannot be vectorized   [ src/effective.c(353,6) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between *sims->effprocess[randsynd][i][j] (353:6) and channels[l][b][0][i][j] (354:7)
         remark #15346: vector dependence: assumed FLOW dependence between channels[l][b][0][i][j] (354:7) and *sims->effprocess[randsynd][i][j] (353:6)

         LOOP BEGIN at src/effective.c(353,6)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at src/effective.c(353,6)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at src/effective.c(353,6)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(371,5)
         remark #15382: vectorization support: call to function _?1memcpy cannot be vectorized   [ src/effective.c(372,6) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between *sims->effprocess[randsynd][i][j] (372:6) and channels[l][b][0][i][j] (373:7)
         remark #15346: vector dependence: assumed FLOW dependence between channels[l][b][0][i][j] (373:7) and *sims->effprocess[randsynd][i][j] (372:6)

         LOOP BEGIN at src/effective.c(372,6)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at src/effective.c(372,6)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at src/effective.c(372,6)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(383,5)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between channels[l][b][1][i][j] (385:7) and channels[l][b][1][i][j] (385:7)
         remark #15346: vector dependence: assumed OUTPUT dependence between channels[l][b][1][i][j] (385:7) and channels[l][b][1][i][j] (385:7)

         LOOP BEGIN at src/effective.c(384,6)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between channels[l][b][1][i][j] (385:7) and (*(*((*(sims+8))->effprocess+randsynd*8)+i*8))[j] (385:7)
            remark #15346: vector dependence: assumed ANTI dependence between (*(*((*(sims+8))->effprocess+randsynd*8)+i*8))[j] (385:7) and channels[l][b][1][i][j] (385:7)
         LOOP END

         LOOP BEGIN at src/effective.c(384,6)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at src/effective.c(391,5)
         remark #15382: vectorization support: call to function _?1memcpy cannot be vectorized   [ src/effective.c(392,6) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between *sims->effprocess[randsynd][i][j] (392:6) and channels[l][b][0][i][j] (393:7)
         remark #15346: vector dependence: assumed FLOW dependence between channels[l][b][0][i][j] (393:7) and *sims->effprocess[randsynd][i][j] (392:6)

         LOOP BEGIN at src/effective.c(392,6)
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at src/effective.c(392,6)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at src/effective.c(392,6)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/effective.c(405,3)
      remark #15523: loop was not vectorized: loop control variable s was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: UpdateMetrics(int, double, double, int, struct qecc_t *, struct simul_t *, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/effective.c(68,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(68,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(68,2)
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(69,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.490 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(68,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(73,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(77,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(77,5)
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.308
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 3.250 
      remark #15478: estimated potential speedup: 3.040 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(77,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15388: vectorization support: reference avg[m] has aligned access   [ src/effective.c(78,6) ]
      remark #15389: vectorization support: reference metvals[m] has unaligned access   [ src/effective.c(78,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.231
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 3.250 
      remark #15478: estimated potential speedup: 3.040 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(77,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(80,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/effective.c(81,6)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/effective.c(81,6)
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.308
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 3.250 
         remark #15478: estimated potential speedup: 3.040 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(81,6)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15388: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(82,7) ]
         remark #15389: vectorization support: reference sim->effprocess[s][i][j] has unaligned access   [ src/effective.c(82,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.231
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 3.250 
         remark #15478: estimated potential speedup: 3.040 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/effective.c(81,6)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(89,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(89,3)
   remark #15389: vectorization support: reference sim->metricValues[level+1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference sim->metricValues[level+1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
   remark #15388: vectorization support: reference sim->sumsq[level+1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15388: vectorization support: reference sim->sumsq[level+1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.179
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 9.750 
   remark #15478: estimated potential speedup: 2.470 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(89,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference sim->metricValues[level+1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference sim->metricValues[level+1][m] has unaligned access   [ src/effective.c(90,5) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(90,48) ]
   remark #15389: vectorization support: reference avg[m] has unaligned access   [ src/effective.c(91,45) ]
   remark #15388: vectorization support: reference sim->sumsq[level+1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15388: vectorization support: reference sim->sumsq[level+1][m] has aligned access   [ src/effective.c(91,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 9.750 
   remark #15478: estimated potential speedup: 2.470 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(89,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(94,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(95,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(95,4)
      remark #15389: vectorization support: reference sim->logical[level+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
      remark #15389: vectorization support: reference sim->logical[level+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
      remark #15388: vectorization support: reference sim->sumsq[level+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15388: vectorization support: reference sim->sumsq[level+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.179
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 26 
      remark #15477: vector cost: 9.750 
      remark #15478: estimated potential speedup: 2.470 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(95,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference sim->logical[level+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
      remark #15389: vectorization support: reference sim->logical[level+1][i][j] has unaligned access   [ src/effective.c(96,6) ]
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(96,47) ]
      remark #15389: vectorization support: reference avg[sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(97,81) ]
      remark #15388: vectorization support: reference sim->sumsq[level+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15388: vectorization support: reference sim->sumsq[level+1][sim->nmetrics+i*qcode->nlogs+j] has aligned access   [ src/effective.c(97,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 26 
      remark #15477: vector cost: 9.750 
      remark #15478: estimated potential speedup: 2.470 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(95,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at src/effective.c(108,5)
   remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/effective.c(117,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(117,3)
   remark #15388: vectorization support: reference sim->metricValues[level+1][m] has aligned access   [ src/effective.c(118,5) ]
   remark #15388: vectorization support: reference sim->metricValues[level+1][m] has aligned access   [ src/effective.c(118,5) ]
   remark #15388: vectorization support: reference sim->metricValues[level+1][m] has aligned access   [ src/effective.c(119,158) ]
   remark #15389: vectorization support: reference sim->variance[level+1][m] has unaligned access   [ src/effective.c(119,5) ]
   remark #15389: vectorization support: reference sim->sumsq[level+1][m] has unaligned access   [ src/effective.c(119,126) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.102
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 82 
   remark #15477: vector cost: 15.250 
   remark #15478: estimated potential speedup: 4.550 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(117,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference sim->metricValues[level+1][m] has aligned access   [ src/effective.c(118,5) ]
   remark #15388: vectorization support: reference sim->metricValues[level+1][m] has aligned access   [ src/effective.c(118,5) ]
   remark #15388: vectorization support: reference sim->metricValues[level+1][m] has aligned access   [ src/effective.c(119,158) ]
   remark #15389: vectorization support: reference sim->variance[level+1][m] has unaligned access   [ src/effective.c(119,5) ]
   remark #15389: vectorization support: reference sim->sumsq[level+1][m] has unaligned access   [ src/effective.c(119,126) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.393
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 82 
   remark #15477: vector cost: 15.250 
   remark #15478: estimated potential speedup: 4.550 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/effective.c(117,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/effective.c(121,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/effective.c(122,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/effective.c(122,4)
      remark #15388: vectorization support: reference sim->logical[level+1][i][j] has aligned access   [ src/effective.c(123,6) ]
      remark #15388: vectorization support: reference sim->logical[level+1][i][j] has aligned access   [ src/effective.c(123,6) ]
      remark #15388: vectorization support: reference sim->logical[level+1][i][j] has aligned access   [ src/effective.c(124,229) ]
      remark #15389: vectorization support: reference sim->variance[level+1][sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(124,6) ]
      remark #15389: vectorization support: reference sim->sumsq[level+1][sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(124,162) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.102
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 82 
      remark #15477: vector cost: 15.250 
      remark #15478: estimated potential speedup: 4.550 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(122,4)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference sim->logical[level+1][i][j] has aligned access   [ src/effective.c(123,6) ]
      remark #15388: vectorization support: reference sim->logical[level+1][i][j] has aligned access   [ src/effective.c(123,6) ]
      remark #15388: vectorization support: reference sim->logical[level+1][i][j] has aligned access   [ src/effective.c(124,229) ]
      remark #15389: vectorization support: reference sim->variance[level+1][sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(124,6) ]
      remark #15389: vectorization support: reference sim->sumsq[level+1][sim->nmetrics+i*qcode->nlogs+j] has unaligned access   [ src/effective.c(124,162) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.393
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 82 
      remark #15477: vector cost: 15.250 
      remark #15478: estimated potential speedup: 4.550 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/effective.c(122,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================
