Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -fPIC -Wall -Wextra -std=c11 -O3 -xavx -qopt-report-phase=vec -qopt-report=5 -c -o obj/hybrid.o

Begin optimization report for: Coarsegrain(int, struct simul_t **, double *****, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/hybrid.c(15,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/hybrid.c(22,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/hybrid.c(25,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/hybrid.c(27,6)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/hybrid.c(27,6)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/hybrid.c(27,6)
               remark #15388: vectorization support: reference avgchans[b][i][j] has aligned access   [ src/hybrid.c(28,7) ]
               remark #15305: vectorization support: vector length 4
               remark #15399: vectorization support: unroll factor set to 2
               remark #15309: vectorization support: normalized vectorization overhead 1.667
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 4 
               remark #15477: vector cost: 0.750 
               remark #15478: estimated potential speedup: 1.490 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/hybrid.c(27,6)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/hybrid.c(31,4)
   <Distributed chunk1>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/hybrid.c(32,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/hybrid.c(33,6)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/hybrid.c(33,6)
            remark #15389: vectorization support: reference avgchans[*(*((*(sims+s*8))->decbins+level*8)+c*4)][i][j] has unaligned access   [ src/hybrid.c(34,7) ]
            remark #15389: vectorization support: reference avgchans[*(*((*(sims+s*8))->decbins+level*8)+c*4)][i][j] has unaligned access   [ src/hybrid.c(34,7) ]
            remark #15388: vectorization support: reference channels[level][c][s][i][j] has aligned access   [ src/hybrid.c(34,55) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.400
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 23 
            remark #15477: vector cost: 5.000 
            remark #15478: estimated potential speedup: 4.340 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/hybrid.c(33,6)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference avgchans[*(*((*(sims+s*8))->decbins+level*8)+c*4)][i][j] has unaligned access   [ src/hybrid.c(34,7) ]
            remark #15389: vectorization support: reference avgchans[*(*((*(sims+s*8))->decbins+level*8)+c*4)][i][j] has unaligned access   [ src/hybrid.c(34,7) ]
            remark #15388: vectorization support: reference channels[level][c][s][i][j] has aligned access   [ src/hybrid.c(34,55) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 1.600
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
         LOOP END

         LOOP BEGIN at src/hybrid.c(33,6)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/hybrid.c(31,4)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between binsizes[*(*((*(sims+s*8))->decbins+level*8)+c*4)] (35:5) and binsizes[*(*((*(sims+s*8))->decbins+level*8)+c*4)] (35:5)
      remark #15346: vector dependence: assumed ANTI dependence between binsizes[*(*((*(sims+s*8))->decbins+level*8)+c*4)] (35:5) and binsizes[*(*((*(sims+s*8))->decbins+level*8)+c*4)] (35:5)
   LOOP END

   LOOP BEGIN at src/hybrid.c(31,4)
   <Remainder, Distributed chunk2>
   LOOP END

   LOOP BEGIN at src/hybrid.c(37,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/hybrid.c(38,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/hybrid.c(39,6)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/hybrid.c(39,6)
            remark #15388: vectorization support: reference channels[level][c][s][i][j] has aligned access   [ src/hybrid.c(40,7) ]
            remark #15389: vectorization support: reference avgchans[*(*((*(sims+s*8))->decbins+level*8)+c*4)][i][j] has unaligned access   [ src/hybrid.c(40,37) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.098
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 44 
            remark #15477: vector cost: 10.250 
            remark #15478: estimated potential speedup: 3.770 
            remark #15486: divides: 1 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/hybrid.c(39,6)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference channels[level][c][s][i][j] has aligned access   [ src/hybrid.c(40,7) ]
            remark #15389: vectorization support: reference avgchans[*(*((*(sims+s*8))->decbins+level*8)+c*4)][i][j] has unaligned access   [ src/hybrid.c(40,37) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 0.390
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
         LOOP END

         LOOP BEGIN at src/hybrid.c(39,6)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/hybrid.c(43,4)
      remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/hybrid.c(45,6) ]

      LOOP BEGIN at src/hybrid.c(44,5)
         remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/hybrid.c(45,6) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================
