Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -fPIC -Wall -Wextra -std=c11 -O3 -xavx -qopt-report-phase=vec -qopt-report=5 -c -o obj/logmetrics.o

Begin optimization report for: Entropy(double __complex__ **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/logmetrics.c(18,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.121
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 118 
   remark #15477: vector cost: 45.500 
   remark #15478: estimated potential speedup: 2.310 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: FrobeniousNorm(double __complex__ **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/logmetrics.c(73,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/logmetrics.c(74,3)
      remark #15389: vectorization support: reference (*(choi+i*8))[j] has unaligned access   [ src/logmetrics.c(75,35) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.012
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 111 
      remark #15477: vector cost: 104.500 
      remark #15478: estimated potential speedup: 1.040 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ChoiToChi(double __complex__ **, double __complex__ **, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/logmetrics.c(87,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)

   LOOP BEGIN at src/logmetrics.c(88,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
      remark #15346: vector dependence: assumed ANTI dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: NonPauliness(double __complex__ **, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/logmetrics.c(100,2)
   remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/logmetrics.c(101,12) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+i*8))[j] (103:4) and (*(chi+i*8))[j] (103:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+i*8))[j] (103:4) and (*(chi+i*8))[j] (103:4)

   LOOP BEGIN at src/logmetrics.c(102,3)
      remark #15389: vectorization support: reference (*(chi+i*8))[j] has unaligned access   [ src/logmetrics.c(103,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.125
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 6.000 
      remark #15478: estimated potential speedup: 1.030 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/logmetrics.c(102,3)
   LOOP END

   LOOP BEGIN at src/logmetrics.c(102,3)
   LOOP END

   LOOP BEGIN at src/logmetrics.c(102,3)
   LOOP END
LOOP END

LOOP BEGIN at src/logmetrics.c(87,2) inlined into src/logmetrics.c(105,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)

   LOOP BEGIN at src/logmetrics.c(88,3) inlined into src/logmetrics.c(105,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
      remark #15346: vector dependence: assumed ANTI dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
   LOOP END
LOOP END

LOOP BEGIN at src/logmetrics.c(107,2)
   remark #15389: vectorization support: reference chi[i] has unaligned access   [ src/logmetrics.c(110,14) ]
   remark #15389: vectorization support: reference chi[i] has unaligned access   [ src/logmetrics.c(111,33) ]
   remark #15389: vectorization support: reference chi[i] has unaligned access   [ src/logmetrics.c(111,68) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+i*8))[i]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(110,14) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+i*8))[j]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(111,33) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+i*8))[i]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(111,68) ]
   remark #15305: vectorization support: vector length 1
   remark #15309: vectorization support: normalized vectorization overhead 0.039
   remark #15456: masked unaligned unit stride loads: 3 
   remark #15458: masked indexed (or gather) loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 317 
   remark #15477: vector cost: 591.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at src/logmetrics.c(108,3)
      remark #15389: vectorization support: reference chi[j] has unaligned access   [ src/logmetrics.c(110,32) ]
      remark #15389: vectorization support: reference (*(chi+i*8))[j] has unaligned access   [ src/logmetrics.c(111,33) ]
      remark #15389: vectorization support: reference chi[j] has unaligned access   [ src/logmetrics.c(111,86) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+j*8))[j]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(110,32) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+j*8))[j]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(111,86) ]
      remark #15305: vectorization support: vector length 1
      remark #15309: vectorization support: normalized vectorization overhead 0.017
      remark #15456: masked unaligned unit stride loads: 3 
      remark #15458: masked indexed (or gather) loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 317 
      remark #15477: vector cost: 583.000 
      remark #15478: estimated potential speedup: 0.540 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/logmetrics.c(108,3)
   LOOP END

   LOOP BEGIN at src/logmetrics.c(108,3)
   LOOP END

   LOOP BEGIN at src/logmetrics.c(108,3)
   LOOP END
LOOP END

LOOP BEGIN at src/logmetrics.c(117,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/logmetrics.c(118,3) ]
LOOP END
===========================================================================

Begin optimization report for: ComputeMetrics(double *, int, char **, double __complex__ **, char *, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/logmetrics.c(127,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/logmetrics.c(87,2) inlined into src/logmetrics.c(138,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
      remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)

      LOOP BEGIN at src/logmetrics.c(88,3) inlined into src/logmetrics.c(138,17)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
         remark #15346: vector dependence: assumed ANTI dependence between (*(chi+(j/4)*8))[:] (89:4) and (*(chi+(j/4)*8))[:] (89:4)
      LOOP END
   LOOP END

   LOOP BEGIN at src/logmetrics.c(107,2) inlined into src/logmetrics.c(138,17)
      remark #15389: vectorization support: reference chi[i] has unaligned access   [ src/logmetrics.c(110,14) ]
      remark #15389: vectorization support: reference chi[i] has unaligned access   [ src/logmetrics.c(111,33) ]
      remark #15389: vectorization support: reference chi[i] has unaligned access   [ src/logmetrics.c(111,68) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+i*8))[i]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(110,14) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+i*8))[j]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(111,33) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+i*8))[i]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(111,68) ]
      remark #15305: vectorization support: vector length 1
      remark #15309: vectorization support: normalized vectorization overhead 0.039
      remark #15456: masked unaligned unit stride loads: 3 
      remark #15458: masked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 317 
      remark #15477: vector cost: 591.000 
      remark #15478: estimated potential speedup: 0.530 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at src/logmetrics.c(108,3) inlined into src/logmetrics.c(138,17)
         remark #15389: vectorization support: reference chi[j] has unaligned access   [ src/logmetrics.c(110,32) ]
         remark #15389: vectorization support: reference (*(chi+i*8))[j] has unaligned access   [ src/logmetrics.c(111,33) ]
         remark #15389: vectorization support: reference chi[j] has unaligned access   [ src/logmetrics.c(111,86) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+j*8))[j]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(110,32) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <(*(chi+j*8))[j]>, masked, 64-bit indexed, part of address is read from memory   [ src/logmetrics.c(111,86) ]
         remark #15305: vectorization support: vector length 1
         remark #15309: vectorization support: normalized vectorization overhead 0.017
         remark #15456: masked unaligned unit stride loads: 3 
         remark #15458: masked indexed (or gather) loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 317 
         remark #15477: vector cost: 583.000 
         remark #15478: estimated potential speedup: 0.540 
         remark #15486: divides: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/logmetrics.c(108,3) inlined into src/logmetrics.c(138,17)
      LOOP END

      LOOP BEGIN at src/logmetrics.c(108,3) inlined into src/logmetrics.c(138,17)
      LOOP END

      LOOP BEGIN at src/logmetrics.c(108,3) inlined into src/logmetrics.c(138,17)
      LOOP END
   LOOP END

   LOOP BEGIN at src/logmetrics.c(117,2) inlined into src/logmetrics.c(138,17)
      remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/logmetrics.c(118,3) ]
   LOOP END

   LOOP BEGIN at src/logmetrics.c(18,2) inlined into src/logmetrics.c(141,17)
      remark #15305: vectorization support: vector length 4
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.337
      remark #15300: LOOP WAS VECTORIZED
      remark #15452: unmasked strided loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 118 
      remark #15477: vector cost: 25.250 
      remark #15478: estimated potential speedup: 3.490 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/logmetrics.c(73,2) inlined into src/logmetrics.c(129,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/logmetrics.c(74,3) inlined into src/logmetrics.c(129,17)
         remark #15389: vectorization support: reference (*(choi+i*8))[j] has unaligned access   [ src/logmetrics.c(75,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.012
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 111 
         remark #15477: vector cost: 104.500 
         remark #15478: estimated potential speedup: 1.040 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at src/logmetrics.c(100,2) inlined into src/logmetrics.c(138,17)
      remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/logmetrics.c(101,12) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+i*8))[j] (103:4) and (*(chi+i*8))[j] (103:4)
      remark #15346: vector dependence: assumed OUTPUT dependence between (*(chi+i*8))[j] (103:4) and (*(chi+i*8))[j] (103:4)

      LOOP BEGIN at src/logmetrics.c(102,3) inlined into src/logmetrics.c(138,17)
         remark #15389: vectorization support: reference (*(chi+i*8))[j] has unaligned access   [ src/logmetrics.c(103,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.125
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 7 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.030 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/logmetrics.c(102,3) inlined into src/logmetrics.c(138,17)
      LOOP END

      LOOP BEGIN at src/logmetrics.c(102,3) inlined into src/logmetrics.c(138,17)
      LOOP END

      LOOP BEGIN at src/logmetrics.c(102,3) inlined into src/logmetrics.c(138,17)
      LOOP END
   LOOP END

   LOOP BEGIN at src/logmetrics.c(30,2) inlined into src/logmetrics.c(144,17)
      remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/logmetrics.c(31,17) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between call:malloc(size_t) (31:17) and chandiff[i] (33:4)
      remark #15346: vector dependence: assumed ANTI dependence between chandiff[i] (33:4) and call:malloc(size_t) (31:17)

      LOOP BEGIN at src/logmetrics.c(32,3) inlined into src/logmetrics.c(144,17)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between (*(chandiff+i*8))[j] (33:4) and (*(choi+i*8))[j] (33:4)
         remark #15346: vector dependence: assumed ANTI dependence between (*(choi+i*8))[j] (33:4) and (*(chandiff+i*8))[j] (33:4)
      LOOP END

      LOOP BEGIN at src/logmetrics.c(32,3) inlined into src/logmetrics.c(144,17)
      LOOP END

      LOOP BEGIN at src/logmetrics.c(32,3) inlined into src/logmetrics.c(144,17)
      LOOP END

      LOOP BEGIN at src/logmetrics.c(32,3) inlined into src/logmetrics.c(144,17)
      LOOP END
   LOOP END

   LOOP BEGIN at src/logmetrics.c(43,2) inlined into src/logmetrics.c(144,17)
      remark #15389: vectorization support: reference singvals[i] has unaligned access   [ src/logmetrics.c(44,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.039
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 109 
      remark #15477: vector cost: 110.000 
      remark #15478: estimated potential speedup: 0.950 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/logmetrics.c(46,2) inlined into src/logmetrics.c(144,17)
      remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/logmetrics.c(47,3) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: TraceDistance(double __complex__ **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/logmetrics.c(30,2)
   remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/logmetrics.c(31,17) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between call:malloc(size_t) (31:17) and choi[i] (33:4)
   remark #15346: vector dependence: assumed ANTI dependence between choi[i] (33:4) and call:malloc(size_t) (31:17)

   LOOP BEGIN at src/logmetrics.c(32,3)
      remark #15389: vectorization support: reference (*(chandiff+i*8))[j] has unaligned access   [ src/logmetrics.c(33,4) ]
      remark #15389: vectorization support: reference (*(choi+i*8))[j] has unaligned access   [ src/logmetrics.c(33,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.188
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 0.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/logmetrics.c(32,3)
   LOOP END

   LOOP BEGIN at src/logmetrics.c(32,3)
   LOOP END

   LOOP BEGIN at src/logmetrics.c(32,3)
   LOOP END
LOOP END

LOOP BEGIN at src/logmetrics.c(43,2)
   remark #15389: vectorization support: reference singvals[i] has unaligned access   [ src/logmetrics.c(44,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 1
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.039
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 109 
   remark #15477: vector cost: 110.000 
   remark #15478: estimated potential speedup: 0.950 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/logmetrics.c(46,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/logmetrics.c(47,3) ]
LOOP END
===========================================================================
