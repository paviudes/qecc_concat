Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -fPIC -Wall -Wextra -std=c11 -O3 -xavx -qopt-report-phase=vec -qopt-report=5 -c -o obj/main.o

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/main.c(32,2)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ src/main.c(33,12) ]
LOOP END

LOOP BEGIN at src/main.c(57,4)
   remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(58,15) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/main.c(61,4)
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(62,5) ]
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(62,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.092
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 12.250 
   remark #15478: estimated potential speedup: 1.830 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(61,4)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(62,5) ]
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(62,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 12.250 
   remark #15478: estimated potential speedup: 1.830 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(80,4)
   remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(81,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/main.c(84,4)
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(85,5) ]
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(85,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.092
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 12.250 
   remark #15478: estimated potential speedup: 1.830 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(84,4)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(85,5) ]
   remark #15389: vectorization support: reference dist[i] has unaligned access   [ src/main.c(85,15) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 12.250 
   remark #15478: estimated potential speedup: 1.830 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(116,3)
   remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(118,17) ]
   remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(118,35) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:genrand_real3() (118:17) and call:genrand_real3() (118:35)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:genrand_real3() (118:35) and call:genrand_real3() (118:17)

   LOOP BEGIN at src/main.c(117,4)
      remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(118,17) ]
      remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(118,35) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

LOOP BEGIN at src/main.c(128,5)
   remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/main.c(129,16) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(matP+i*8))[j] (131:7) and (*(matP+i*8))[j] (133:8)
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(matP+i*8))[j] (133:8) and (*(matP+i*8))[j] (131:7)

   LOOP BEGIN at src/main.c(130,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between (*(matP+i*8))[j] (131:7) and (*(mat+i*8))[k] (133:8)
      remark #15346: vector dependence: assumed ANTI dependence between (*(mat+i*8))[k] (133:8) and (*(matP+i*8))[j] (131:7)

      LOOP BEGIN at src/main.c(132,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between (*(mat+j*8))[k] (133:34) and (*(matP+i*8))[j] (133:8)
         remark #15346: vector dependence: assumed FLOW dependence between (*(matP+i*8))[j] (133:8) and (*(mat+j*8))[k] (133:34)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END
   LOOP END

   LOOP BEGIN at src/main.c(130,6)

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END
   LOOP END

   LOOP BEGIN at src/main.c(130,6)

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END
   LOOP END

   LOOP BEGIN at src/main.c(130,6)

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END

      LOOP BEGIN at src/main.c(132,7)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/main.c(143,5)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/main.c(144,6) ]
LOOP END

LOOP BEGIN at src/main.c(157,5)
   remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/main.c(158,16) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between (*(mat+j*8))[i] (160:32) and (*(matH+i*8))[j] (160:7)
   remark #15346: vector dependence: assumed FLOW dependence between (*(matH+i*8))[j] (160:7) and (*(mat+j*8))[i] (160:32)

   LOOP BEGIN at src/main.c(159,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between (*(mat+j*8))[i] (160:32) and (*(matH+i*8))[j] (160:7)
      remark #15346: vector dependence: assumed FLOW dependence between (*(matH+i*8))[j] (160:7) and (*(mat+j*8))[i] (160:32)
   LOOP END

   LOOP BEGIN at src/main.c(159,6)
   LOOP END

   LOOP BEGIN at src/main.c(159,6)
   LOOP END

   LOOP BEGIN at src/main.c(159,6)
   LOOP END
LOOP END

LOOP BEGIN at src/main.c(169,5)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/main.c(170,6) ]
LOOP END

LOOP BEGIN at src/main.c(183,5)
   remark #15389: vectorization support: reference mat[i] has unaligned access   [ src/main.c(184,28) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(mat+i*8))[i]>, 64-bit indexed, part of address is read from memory   [ src/main.c(184,28) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.548
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 10.500 
   remark #15478: estimated potential speedup: 0.550 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(186,5)
   remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/main.c(187,16) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(matN+i*8))[j] (189:7) and (*(matN+i*8))[i] (190:6)
   remark #15346: vector dependence: assumed OUTPUT dependence between (*(matN+i*8))[i] (190:6) and (*(matN+i*8))[j] (189:7)

   LOOP BEGIN at src/main.c(188,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between (*(matN+i*8))[j] (189:7) and (*(mat+i*8))[j] (189:7)
      remark #15346: vector dependence: assumed ANTI dependence between (*(mat+i*8))[j] (189:7) and (*(matN+i*8))[j] (189:7)
   LOOP END

   LOOP BEGIN at src/main.c(188,6)
   LOOP END

   LOOP BEGIN at src/main.c(188,6)
   LOOP END

   LOOP BEGIN at src/main.c(188,6)
   LOOP END
LOOP END

LOOP BEGIN at src/main.c(199,5)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/main.c(200,6) ]
LOOP END

LOOP BEGIN at src/main.c(216,4)
   remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(217,15) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/main.c(223,4)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at src/main.c(223,4)
   remark #15388: vectorization support: reference dist[i] has aligned access   [ src/main.c(224,5) ]
   remark #15388: vectorization support: reference dist[i] has aligned access   [ src/main.c(224,15) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.093
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 3.170 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(223,4)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference dist[i] has aligned access   [ src/main.c(224,5) ]
   remark #15388: vectorization support: reference dist[i] has aligned access   [ src/main.c(224,15) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.371
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 3.170 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(223,4)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/main.c(244,4)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ src/main.c(245,18) ]
LOOP END

LOOP BEGIN at src/main.c(255,4)
   remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(257,18) ]
   remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(257,36) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:genrand_real3() (257:18) and call:genrand_real3() (257:36)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:genrand_real3() (257:36) and call:genrand_real3() (257:18)

   LOOP BEGIN at src/main.c(256,5)
      remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(257,18) ]
      remark #15382: vectorization support: call to function genrand_real3() cannot be vectorized   [ src/main.c(257,36) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

LOOP BEGIN at src/main.c(260,4)
   remark #15382: vectorization support: call to function malloc(size_t) cannot be vectorized   [ src/main.c(261,15) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between (*(choi+i*8))[j] (263:6) and (*(choi+i*8))[i] (267:5)
   remark #15346: vector dependence: assumed ANTI dependence between (*(choi+i*8))[i] (267:5) and (*(choi+i*8))[j] (263:6)

   LOOP BEGIN at src/main.c(262,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ src/main.c(264,6) ]

      LOOP BEGIN at src/main.c(264,6)
         remark #15389: vectorization support: reference (*(mat+j*8))[k] has unaligned access   [ src/main.c(265,38) ]
         remark #15389: vectorization support: reference (*(mat+i*8))[k] has unaligned access   [ src/main.c(265,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.250
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 20.000 
         remark #15478: estimated potential speedup: 0.720 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END
   LOOP END

   LOOP BEGIN at src/main.c(262,5)

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END
   LOOP END

   LOOP BEGIN at src/main.c(262,5)

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END
   LOOP END

   LOOP BEGIN at src/main.c(262,5)

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END

      LOOP BEGIN at src/main.c(264,6)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/main.c(269,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/main.c(270,5)
      remark #15389: vectorization support: reference (*(choi+i*8))[j] has unaligned access   [ src/main.c(271,6) ]
      remark #15389: vectorization support: reference (*(choi+i*8))[j] has unaligned access   [ src/main.c(271,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.211
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 67 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 5.820 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at src/main.c(285,4)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/main.c(286,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/main.c(290,4)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/main.c(291,5) ]
LOOP END

LOOP BEGIN at src/main.c(294,4)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/main.c(295,5) ]
LOOP END

LOOP BEGIN at src/main.c(331,4)
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ src/main.c(332,5) ]
   remark #15389: vectorization support: reference arr[i] has unaligned access   [ src/main.c(334,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.080 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/main.c(333,4)
LOOP END

LOOP BEGIN at src/main.c(331,4)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/main.c(349,4)
   remark #15382: vectorization support: call to function BinaryDot(int, int) cannot be vectorized   [ src/main.c(350,17) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/main.c(495,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/main.c(496,3) ]
LOOP END
===========================================================================
