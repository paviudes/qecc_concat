Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -fPIC -Wall -Wextra -std=c11 -O3 -xavx -qopt-report-phase=vec -qopt-report=5 -c -o obj/qecc.o

Begin optimization report for: FreeQECC(struct qecc_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(47,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/qecc.c(48,3) ]
LOOP END

LOOP BEGIN at src/qecc.c(52,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/qecc.c(55,4) ]

   LOOP BEGIN at src/qecc.c(54,3)
      remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/qecc.c(55,4) ]
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(60,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ src/qecc.c(61,3) ]
LOOP END
===========================================================================

Begin optimization report for: ChoiToProcess(double **, double __complex__ **, double __complex__ ***)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(72,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <pauli[j]>, part of index is nonlinearly computed   [ src/qecc.c(78,41) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <pauli[j][?/2]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,41) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(*(pauli+j*8)+(?/2)*8))[(k/4)/2]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,41) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <pauli[i]>, part of index is nonlinearly computed   [ src/qecc.c(78,78) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <pauli[i][:]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,78) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <(*(*(pauli+i*8)+?*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,78) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <process[i]>, part of index is nonlinearly computed   [ src/qecc.c(79,3) ]
   remark #15329: vectorization support: indirect store was emulated for the variable <process[i][j]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(79,3) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.087
   remark #15462: unmasked indexed (or gather) loads: 7 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 69 
   remark #15477: vector cost: 91.500 
   remark #15478: estimated potential speedup: 0.740 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at src/qecc.c(77,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <choi[k/4]>, part of index is nonlinearly computed   [ src/qecc.c(78,20) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(choi+(k/4)*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,20) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <pauli[j][?/2]>, part of index is nonlinearly computed   [ src/qecc.c(78,41) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(*(pauli+j*8)+(?/2)*8))[(k/4)/2]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,41) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <pauli[i][:]>, part of index is nonlinearly computed   [ src/qecc.c(78,78) ]
      remark #15328: vectorization support: indirect load was emulated for the variable <(*(*(pauli+i*8)+?*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,78) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.024
      remark #15462: unmasked indexed (or gather) loads: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 53 
      remark #15477: vector cost: 393.500 
      remark #15478: estimated potential speedup: 0.130 
      remark #15482: vectorized math library calls: 10 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: GetFullProcessMatrix(struct qecc_t *, struct simul_t *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(94,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(96,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(98,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(100,6)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/qecc.c(103,7)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/qecc.c(103,7)
               remark #15389: vectorization support: reference sim->virtchan[q] has unaligned access   [ src/qecc.c(104,25) ]
               remark #15389: vectorization support: reference qecc->action[i][k][q] has unaligned access   [ src/qecc.c(104,44) ]
               remark #15388: vectorization support: reference qecc->action[j][l][q] has aligned access   [ src/qecc.c(104,69) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15328: vectorization support: indirect load was emulated for the variable <sim->virtchan[q][*(*(*(qecc->action+i*8)+k*8)+q*4)]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(104,25) ]
               remark #15328: vectorization support: indirect load was emulated for the variable <*(*(*(sim->virtchan+q*8)+(*(*(*(qecc->action+i*8)+k*8)+q*4))*8)+>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(104,25) ]
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.710
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15450: unmasked unaligned unit stride loads: 2 
               remark #15462: unmasked indexed (or gather) loads: 2 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 15 
               remark #15477: vector cost: 12.500 
               remark #15478: estimated potential speedup: 1.160 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/qecc.c(103,7)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(114,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(116,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(119,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/qecc.c(119,5)
         remark #15389: vectorization support: reference sim->virtchan[q] has unaligned access   [ src/qecc.c(120,23) ]
         remark #15388: vectorization support: reference qecc->action[i][j][q] has aligned access   [ src/qecc.c(120,42) ]
         remark #15388: vectorization support: reference qecc->action[i][j][q] has aligned access   [ src/qecc.c(120,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: indirect load was emulated for the variable <sim->virtchan[q][*(*(*(qecc->action+i*8)+j*8)+q*4)]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(120,23) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <*(*(*(sim->virtchan+q*8)+(*(*(*(qecc->action+i*8)+j*8)+q*4))*8)+>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(120,23) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.708
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 15 
         remark #15477: vector cost: 12.000 
         remark #15478: estimated potential speedup: 1.210 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/qecc.c(119,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(129,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(131,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(133,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(135,6)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/qecc.c(135,6)
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.024
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 115 
            remark #15477: vector cost: 28.250 
            remark #15478: estimated potential speedup: 3.620 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(135,6)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 0.097
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 115 
            remark #15477: vector cost: 28.250 
            remark #15478: estimated potential speedup: 3.620 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(135,6)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeSyndromeDistribution(struct qecc_t *, struct simul_t *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(172,2)
   remark #15523: loop was not vectorized: loop control variable s was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/qecc.c(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sim->cumulative[s] (177:4) and sim->cumulative[s-1] (177:4)
LOOP END

LOOP BEGIN at src/qecc.c(176,2)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: MLDecodeSyndrome(int, struct qecc_t *, struct simul_t *, struct constants_t *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(245,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(250,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(253,6)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(254,7)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/qecc.c(254,7)
            remark #15389: vectorization support: reference sim->process[u][*(*(*consts->algebra+l*8)+u*4)][i][j] has unaligned access   [ src/qecc.c(255,20) ]
            remark #15388: vectorization support: reference qecc->projector[synd][j] has aligned access   [ src/qecc.c(255,74) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.786
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 21 
            remark #15477: vector cost: 3.500 
            remark #15478: estimated potential speedup: 4.830 
            remark #15487: type converts: 1 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(254,7)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference sim->process[u][*(*(*consts->algebra+l*8)+u*4)][i][j] has unaligned access   [ src/qecc.c(255,20) ]
            remark #15388: vectorization support: reference qecc->projector[synd][j] has aligned access   [ src/qecc.c(255,74) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.143
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15462: unmasked indexed (or gather) loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 11 
            remark #15477: vector cost: 7.870 
            remark #15478: estimated potential speedup: 1.340 
            remark #15487: type converts: 1 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(254,7)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/qecc.c(261,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(264,6)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/qecc.c(264,6)
         remark #15389: vectorization support: reference sim->process[u][u][i] has unaligned access   [ src/qecc.c(266,12) ]
         remark #15388: vectorization support: reference qecc->projector[synd][i] has aligned access   [ src/qecc.c(266,41) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: indirect load was emulated for the variable <sim->process[u][u][i][i]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(266,12) ]
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.373
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 7.870 
         remark #15478: estimated potential speedup: 1.340 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/qecc.c(264,6)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MLDecoder(struct qecc_t *, struct simul_t *, struct constants_t *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(292,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(245,3) inlined into src/qecc.c(294,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(250,5) inlined into src/qecc.c(294,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(253,6) inlined into src/qecc.c(294,3)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(294,3)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(294,3)
               remark #15389: vectorization support: reference sim->process[u][*(*(*consts->algebra+l*8)+u*4)][i][j] has unaligned access   [ src/qecc.c(255,20) ]
               remark #15388: vectorization support: reference qecc->projector[s][j] has aligned access   [ src/qecc.c(255,74) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 4
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.786
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 21 
               remark #15477: vector cost: 3.500 
               remark #15478: estimated potential speedup: 4.830 
               remark #15487: type converts: 1 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(294,3)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference sim->process[u][*(*(*consts->algebra+l*8)+u*4)][i][j] has unaligned access   [ src/qecc.c(255,20) ]
               remark #15388: vectorization support: reference qecc->projector[s][j] has aligned access   [ src/qecc.c(255,74) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 4
               remark #15309: vectorization support: normalized vectorization overhead 3.143
               remark #15301: REMAINDER LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15462: unmasked indexed (or gather) loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 11 
               remark #15477: vector cost: 7.870 
               remark #15478: estimated potential speedup: 1.340 
               remark #15487: type converts: 1 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(294,3)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/qecc.c(261,5) inlined into src/qecc.c(294,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(264,6) inlined into src/qecc.c(294,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/qecc.c(264,6) inlined into src/qecc.c(294,3)
            remark #15389: vectorization support: reference sim->process[u][u][i] has unaligned access   [ src/qecc.c(266,12) ]
            remark #15388: vectorization support: reference qecc->projector[s][i] has aligned access   [ src/qecc.c(266,41) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15328: vectorization support: indirect load was emulated for the variable <sim->process[u][u][i][i]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(266,12) ]
            remark #15305: vectorization support: vector length 8
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.373
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15462: unmasked indexed (or gather) loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 11 
            remark #15477: vector cost: 7.870 
            remark #15478: estimated potential speedup: 1.340 
            remark #15487: type converts: 1 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(264,6) inlined into src/qecc.c(294,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeEffectiveStateSyndrome(int, struct qecc_t *, struct simul_t *, struct constants_t *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(315,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(316,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/qecc.c(316,3)
      remark #15388: vectorization support: reference (*(*(sim->effective+synd*8)+i*8))[j] has aligned access   [ src/qecc.c(317,5) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 4.330 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/qecc.c(316,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference (*(*(sim->effective+synd*8)+i*8))[j] has aligned access   [ src/qecc.c(317,5) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 4.330 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/qecc.c(316,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(322,4)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at src/qecc.c(323,5)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at src/qecc.c(324,6)
         remark #15523: loop was not vectorized: loop control variable a was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at src/qecc.c(325,7)
            remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(328,4)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at src/qecc.c(329,5)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at src/qecc.c(330,6)
         remark #15523: loop was not vectorized: loop control variable a was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at src/qecc.c(331,7)
            remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(335,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(336,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/qecc.c(336,4)
      remark #15388: vectorization support: reference (*(*(sim->effective+synd*8)+i*8))[j] has aligned access   [ src/qecc.c(337,6) ]
      remark #15388: vectorization support: reference (*(*(sim->effective+synd*8)+i*8))[j] has aligned access   [ src/qecc.c(337,6) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 78 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 23.560 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/qecc.c(336,4)
   <Remainder loop for vectorization>
      remark #15516: remainder loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 78 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 23.560 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ComputeEffectiveStates(struct qecc_t *, struct simul_t *, struct constants_t *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(363,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(315,2) inlined into src/qecc.c(365,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(316,3) inlined into src/qecc.c(365,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/qecc.c(316,3) inlined into src/qecc.c(365,3)
         remark #15388: vectorization support: reference (*(*(sim->effective+s*8)+i*8))[j] has aligned access   [ src/qecc.c(317,5) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 7 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 4.330 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/qecc.c(316,3) inlined into src/qecc.c(365,3)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference (*(*(sim->effective+s*8)+i*8))[j] has aligned access   [ src/qecc.c(317,5) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 3.333
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 79 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 23.770 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/qecc.c(316,3) inlined into src/qecc.c(365,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at src/qecc.c(322,4) inlined into src/qecc.c(365,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at src/qecc.c(323,5) inlined into src/qecc.c(365,3)
         remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at src/qecc.c(324,6) inlined into src/qecc.c(365,3)
            remark #15523: loop was not vectorized: loop control variable a was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at src/qecc.c(325,7) inlined into src/qecc.c(365,3)
               remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/qecc.c(328,4) inlined into src/qecc.c(365,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at src/qecc.c(329,5) inlined into src/qecc.c(365,3)
         remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at src/qecc.c(330,6) inlined into src/qecc.c(365,3)
            remark #15523: loop was not vectorized: loop control variable a was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at src/qecc.c(331,7) inlined into src/qecc.c(365,3)
               remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/qecc.c(335,3) inlined into src/qecc.c(365,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(336,4) inlined into src/qecc.c(365,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/qecc.c(336,4) inlined into src/qecc.c(365,3)
         remark #15388: vectorization support: reference (*(*(sim->effective+s*8)+i*8))[j] has aligned access   [ src/qecc.c(337,6) ]
         remark #15388: vectorization support: reference (*(*(sim->effective+s*8)+i*8))[j] has aligned access   [ src/qecc.c(337,6) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 79 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 23.770 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/qecc.c(336,4) inlined into src/qecc.c(365,3)
      <Remainder loop for vectorization>
         remark #15516: remainder loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 79 
         remark #15477: vector cost: 2.250 
         remark #15478: estimated potential speedup: 23.770 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: SetFullProcessMatrix(struct qecc_t *, struct simul_t *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(437,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(438,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(439,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(440,6)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/qecc.c(440,6)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/qecc.c(440,6)
               remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(441,8) ]
               remark #15389: vectorization support: reference process[qecc->nstabs*((i*qecc->nlogs)*qecc->nstabs+j*qecc->nstabs+k)+l] has unaligned access   [ src/qecc.c(441,36) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 2.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 5 
               remark #15477: vector cost: 2.500 
               remark #15478: estimated potential speedup: 1.250 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/qecc.c(440,6)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(443,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between sim->process[i][i][j][j] (445:6) and sim->process[i][i][j][j] (445:6)
   remark #15346: vector dependence: assumed OUTPUT dependence between sim->process[i][i][j][j] (445:6) and sim->process[i][i][j][j] (445:6)

   LOOP BEGIN at src/qecc.c(444,4)
      remark #15389: vectorization support: reference sim->process[i][i][j] has unaligned access   [ src/qecc.c(445,6) ]
      remark #15389: vectorization support: reference process[i*qecc->nstabs+j] has unaligned access   [ src/qecc.c(445,34) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: indirect store was emulated for the variable <sim->process[i][i][j][j]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(445,6) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.088
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 8.500 
      remark #15478: estimated potential speedup: 0.590 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/qecc.c(444,4)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: SingleShotErrorCorrection(int, int, int, struct qecc_t *, struct simul_t *, struct constants_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(94,3) inlined into src/qecc.c(456,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(96,4) inlined into src/qecc.c(456,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(98,5) inlined into src/qecc.c(456,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(100,6) inlined into src/qecc.c(456,3)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/qecc.c(103,7) inlined into src/qecc.c(456,3)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/qecc.c(103,7) inlined into src/qecc.c(456,3)
               remark #15389: vectorization support: reference sim->virtchan[q] has unaligned access   [ src/qecc.c(104,25) ]
               remark #15389: vectorization support: reference qecc->action[i][k][q] has unaligned access   [ src/qecc.c(104,44) ]
               remark #15388: vectorization support: reference qecc->action[j][l][q] has aligned access   [ src/qecc.c(104,69) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15328: vectorization support: indirect load was emulated for the variable <sim->virtchan[q][*(*(*(qecc->action+i*8)+k*8)+q*4)]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(104,25) ]
               remark #15328: vectorization support: indirect load was emulated for the variable <*(*(*(sim->virtchan+q*8)+(*(*(*(qecc->action+i*8)+k*8)+q*4))*8)+>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(104,25) ]
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.710
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15450: unmasked unaligned unit stride loads: 2 
               remark #15462: unmasked indexed (or gather) loads: 2 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 15 
               remark #15477: vector cost: 12.500 
               remark #15478: estimated potential speedup: 1.160 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/qecc.c(103,7) inlined into src/qecc.c(456,3)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(114,3) inlined into src/qecc.c(456,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(116,4) inlined into src/qecc.c(456,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(119,5) inlined into src/qecc.c(456,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/qecc.c(119,5) inlined into src/qecc.c(456,3)
         remark #15389: vectorization support: reference sim->virtchan[q] has unaligned access   [ src/qecc.c(120,23) ]
         remark #15388: vectorization support: reference qecc->action[i][j][q] has aligned access   [ src/qecc.c(120,42) ]
         remark #15388: vectorization support: reference qecc->action[i][j][q] has aligned access   [ src/qecc.c(120,67) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: indirect load was emulated for the variable <sim->virtchan[q][*(*(*(qecc->action+i*8)+j*8)+q*4)]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(120,23) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <*(*(*(sim->virtchan+q*8)+(*(*(*(qecc->action+i*8)+j*8)+q*4))*8)+>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(120,23) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.708
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 15 
         remark #15477: vector cost: 12.000 
         remark #15478: estimated potential speedup: 1.210 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/qecc.c(119,5) inlined into src/qecc.c(456,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(129,3) inlined into src/qecc.c(456,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(131,4) inlined into src/qecc.c(456,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(133,5) inlined into src/qecc.c(456,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(135,6) inlined into src/qecc.c(456,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/qecc.c(135,6) inlined into src/qecc.c(456,3)
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.024
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 115 
            remark #15477: vector cost: 28.250 
            remark #15478: estimated potential speedup: 3.620 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(135,6) inlined into src/qecc.c(456,3)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15388: vectorization support: reference sim->process[i][j][k][l] has aligned access   [ src/qecc.c(137,8) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 0.097
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 115 
            remark #15477: vector cost: 28.250 
            remark #15478: estimated potential speedup: 3.620 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(135,6) inlined into src/qecc.c(456,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(172,2) inlined into src/qecc.c(458,2)
   remark #15523: loop was not vectorized: loop control variable s was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/qecc.c(176,2) inlined into src/qecc.c(458,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sim->cumulative[s] (177:4) and sim->cumulative[s-1] (177:4)
LOOP END

LOOP BEGIN at src/qecc.c(176,2) inlined into src/qecc.c(458,2)
<Remainder>
LOOP END

LOOP BEGIN at src/qecc.c(292,2) inlined into src/qecc.c(462,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(245,3) inlined into src/qecc.c(462,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(250,5) inlined into src/qecc.c(462,2)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(253,6) inlined into src/qecc.c(462,2)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(462,2)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(462,2)
               remark #15389: vectorization support: reference sim->process[u][*(*(*consts->algebra+l*8)+u*4)][i][j] has unaligned access   [ src/qecc.c(255,20) ]
               remark #15388: vectorization support: reference qecc->projector[s][j] has aligned access   [ src/qecc.c(255,74) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 4
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.786
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 21 
               remark #15477: vector cost: 3.500 
               remark #15478: estimated potential speedup: 4.830 
               remark #15487: type converts: 1 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(462,2)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference sim->process[u][*(*(*consts->algebra+l*8)+u*4)][i][j] has unaligned access   [ src/qecc.c(255,20) ]
               remark #15388: vectorization support: reference qecc->projector[s][j] has aligned access   [ src/qecc.c(255,74) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 4
               remark #15309: vectorization support: normalized vectorization overhead 3.143
               remark #15301: REMAINDER LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15462: unmasked indexed (or gather) loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 11 
               remark #15477: vector cost: 7.870 
               remark #15478: estimated potential speedup: 1.340 
               remark #15487: type converts: 1 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at src/qecc.c(254,7) inlined into src/qecc.c(462,2)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at src/qecc.c(261,5) inlined into src/qecc.c(462,2)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at src/qecc.c(264,6) inlined into src/qecc.c(462,2)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at src/qecc.c(264,6) inlined into src/qecc.c(462,2)
            remark #15389: vectorization support: reference sim->process[u][u][i] has unaligned access   [ src/qecc.c(266,12) ]
            remark #15388: vectorization support: reference qecc->projector[s][i] has aligned access   [ src/qecc.c(266,41) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15328: vectorization support: indirect load was emulated for the variable <sim->process[u][u][i][i]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(266,12) ]
            remark #15305: vectorization support: vector length 8
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.373
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15462: unmasked indexed (or gather) loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 11 
            remark #15477: vector cost: 7.870 
            remark #15478: estimated potential speedup: 1.340 
            remark #15487: type converts: 1 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at src/qecc.c(264,6) inlined into src/qecc.c(462,2)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(363,2) inlined into src/qecc.c(466,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/qecc.c(316,3) inlined into src/qecc.c(466,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/qecc.c(315,2) inlined into src/qecc.c(466,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at src/qecc.c(315,2) inlined into src/qecc.c(466,2)
         remark #15388: vectorization support: reference sim->effective[s][i] has aligned access   [ src/qecc.c(317,5) ]
         remark #15329: vectorization support: indirect store was emulated for the variable <(*(*(sim->effective+s*8)+i*8))[j]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(317,5) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 7 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 1.380 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at src/qecc.c(315,2) inlined into src/qecc.c(466,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at src/qecc.c(322,4) inlined into src/qecc.c(466,2)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at src/qecc.c(323,5) inlined into src/qecc.c(466,2)
         remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at src/qecc.c(324,6) inlined into src/qecc.c(466,2)
            remark #15523: loop was not vectorized: loop control variable a was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at src/qecc.c(325,7) inlined into src/qecc.c(466,2)
               remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/qecc.c(328,4) inlined into src/qecc.c(466,2)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at src/qecc.c(329,5) inlined into src/qecc.c(466,2)
         remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at src/qecc.c(330,6) inlined into src/qecc.c(466,2)
            remark #15523: loop was not vectorized: loop control variable a was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at src/qecc.c(331,7) inlined into src/qecc.c(466,2)
               remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at src/qecc.c(336,4) inlined into src/qecc.c(466,2)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ src/qecc.c(335,3) ]

      LOOP BEGIN at src/qecc.c(335,3) inlined into src/qecc.c(466,2)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between (*(*(sim->effective+s*8)+i*8))[j] (337:6) and (*(*(sim->effective+s*8)+i*8))[j] (337:6)
         remark #15346: vector dependence: assumed ANTI dependence between (*(*(sim->effective+s*8)+i*8))[j] (337:6) and (*(*(sim->effective+s*8)+i*8))[j] (337:6)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(470,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between (*(choi+(k/4)*8))[:] (78:4) and process[i][j] (79:3)
   remark #15346: vector dependence: assumed FLOW dependence between process[i][j] (79:3) and (*(choi+(k/4)*8))[:] (78:4)

   LOOP BEGIN at src/qecc.c(72,2) inlined into src/qecc.c(472,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between (*(choi+(k/4)*8))[:] (78:4) and process[i][j] (79:3)
      remark #15346: vector dependence: assumed FLOW dependence between process[i][j] (79:3) and (*(choi+(k/4)*8))[:] (78:4)

      LOOP BEGIN at src/qecc.c(77,3) inlined into src/qecc.c(472,3)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: irregularly indexed load was emulated for the variable <choi[k/4]>, part of index is nonlinearly computed   [ src/qecc.c(78,20) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <(*(choi+(k/4)*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,20) ]
         remark #15328: vectorization support: irregularly indexed load was emulated for the variable <consts->pauli[j][?/2]>, part of index is nonlinearly computed   [ src/qecc.c(78,41) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <(*(*(consts->pauli+j*8)+(?/2)*8))[(k/4)/2]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,41) ]
         remark #15328: vectorization support: irregularly indexed load was emulated for the variable <consts->pauli[i][:]>, part of index is nonlinearly computed   [ src/qecc.c(78,78) ]
         remark #15328: vectorization support: indirect load was emulated for the variable <(*(*(consts->pauli+i*8)+?*8))[:]>, 64-bit indexed, part of address is read from memory   [ src/qecc.c(78,78) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.024
         remark #15462: unmasked indexed (or gather) loads: 6 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 53 
         remark #15477: vector cost: 393.500 
         remark #15478: estimated potential speedup: 0.130 
         remark #15482: vectorized math library calls: 10 
         remark #15487: type converts: 3 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: InitQECC(struct qecc_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/qecc.c(24,2)
   remark #15523: loop was not vectorized: loop control variable s was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/qecc.c(29,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at src/qecc.c(32,3)
      remark #15523: loop was not vectorized: loop control variable s was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at src/qecc.c(37,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================
