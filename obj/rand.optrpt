Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -I/opt/intel/compilers_and_libraries_2019.1.144/mac/mkl/include -fPIC -Wall -Wextra -std=c11 -O3 -xavx -qopt-report-phase=vec -qopt-report=5 -m64 -c -o obj/rand.o

Begin optimization report for: RandomArray1D(int, int, int, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/rand.c(16,2)
   remark #15382: vectorization support: call to function genrand_int32() cannot be vectorized   [ src/rand.c(8,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: ShuffleInt(int *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/rand.c(24,2)
   remark #15382: vectorization support: call to function genrand_int32() cannot be vectorized   [ src/rand.c(8,26) ]
   remark #15382: vectorization support: call to function genrand_int32() cannot be vectorized   [ src/rand.c(8,26) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/rand.c(28,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: RandomBinarySequence(int, int, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/rand.c(41,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at src/rand.c(41,2)
   remark #15388: vectorization support: reference arr[i] has aligned access   [ src/rand.c(42,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/rand.c(41,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/rand.c(43,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/rand.c(43,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at src/rand.c(43,2)
      remark #15388: vectorization support: reference arr[i] has aligned access   [ src/rand.c(44,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/rand.c(43,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at src/rand.c(24,2) inlined into src/rand.c(45,2)
   remark #15382: vectorization support: call to function genrand_int32() cannot be vectorized   [ src/rand.c(8,26) ]
   remark #15382: vectorization support: call to function genrand_int32() cannot be vectorized   [ src/rand.c(8,26) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/rand.c(28,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================
